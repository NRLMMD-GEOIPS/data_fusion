# Replace all instances of @ within this template with appropriate values for your particular use case.

# "product_params" YAML files specify a given "product" within GeoIPS.
# A "product" within GeoIPS is a set of steps required to process a dataset in a given way.
# The "product_type" specifies what operations must be applied to the dataset for a given product,
#   and in what order.  The processing workflows handle ensuring each step is applied appropriately
#   based on the "product_type" - thus, only supported product types will behave appropriately within
#   GeoIPS.  If a new unsupported order of operations is required for a given product, support for
#   that product_type must be added in the main GeoIPS infrastructure - please contact the GeoIPS
#   Team if you require a new product_type.
# The currently supported product types are specified in geoips/dev/product.py, with the associated
#   required keys and order of operations.

# NOTE: Once the command line interface has been finalized, much of these instructions will be replaced
#       with calls to the command line interface in order to identify available algorithms, colormaps, etc.
#       In the meantime, these instructions will point you towards the code itself that is referenced
#       in the various pieces of the product specification.

# @Product-Name@: This is the "Product-Name" referenced when calling GeoIPS processing command line.
#                 @Product-Name@ within this file must match the filename itself.
#                 @Product-Name@ will be referenced within product_inputs/@source_name@.yaml files,
#                 where the actual required variable names will be identified for a given source.
#                 NOTE: Please use '-' as a delimeter in product names by GeoIPS convention.
#                       This allows using either '_' or '.' as a delimiter in filenames,
#                       another GeoIPS convention.
#                       Capitalization of each word in Product-Name can aid in human readability,
#                       but is not strictly required.
# @product_type@: This string identifies the valid fields within this product.
#                   These are currently specified within geoips/geoips/dev/product.py - your product type
#                   must match one included in product.py. Search for "valid product type" to find the list
#                   of "required_keys" within product.py.
# @alg_name@:     This specifies an algorithm installed via entry points, in any repository.
#                   This string must match the portion of the entry point in setup.py that comes before the '=',
#                   ie, 'single_channel' or 'pmw_tb.pmw_89pct' as found in geoips/setup.py 'geoips.algorithms'.
# @alg_args@:     Additional arguments to pass directly to "alg_func".  If none are required, pass {}
#                   Fields under "alg_args" must match arguments within your specified "alg_func".
# @cmap_func@:    This specifies a colormap installed via entry points, in any repository.
#                   This string must match the portion of the entry point in setup.py that comes before the '=',
#                   ie, 'visir.Infrared' or 'matplotlib_linear_norm' as found in geoips/setup.py 'geoips.user_colormaps'.
# @cmap_args@:    Additional arguments to pass directly to "cmap_func".  If none are required, pass {}
#                   Fields under "cmap_args" must match arguments within your specified "cmap_func".
# @interp_func@:  This specifies an interpolation routine installed via entry points, in any repository.
#                   This string must match the portion of the entry point in setup.py that comes before the '=',
#                   ie, 'pyresample_wrappers.interp_nearest' or 'scipy_wrappers.interp_grid'
#                   as found in geoips/setup.py 'geoips.interpolation'.
#                 Interpolation routines are used when reprojecting to a requested area definition.
# @interp_args@:  Additional arguments to pass directly to "interp_func".  If none are required, pass {}
#                   Fields under "interp_args" must match arguments within your specified "interp_func".
# @covg_func@:    This specifies a coverage check installed via entry points, in any repository.
#                   This string must match the portion of the entry point in setup.py that comes before the '=',
#                   ie, 'masked_arrays' or 'center_radius'
#                   as found in geoips/setup.py 'geoips.coverage_checks'.
#                 Coverage checks are used to
#                   a) determine if there is sufficient coverage to product a product and
#                   b) include % coverage in filename and metadata if required.
# @interp_args@:  Additional arguments to pass directly to "covg_func".  If none are required, pass {}
#                   Fields under "covg_args" must match arguments within your specified "covg_func".


@Product-Name@:
    product_type: @product_type@
    alg_func: @alg_name@
    alg_args: @alg_args@
    cmap_func: @cmap_func@
    cmap_args: @cmap_args@
    interp_func: @interp_func@
    interp_args: @interp_args@
    covg_func: @covg_func@
    covg_args: @covg_args@
